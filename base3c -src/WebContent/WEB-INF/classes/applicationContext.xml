<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>
	
	<!-- 定义aspectj -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 注入代理后的bean到bean自身的BeanPostProcessor... -->  
	<bean class="com.ndlan.canyin.frontdesk.util.InjectBeanSelfProcessor"></bean>  
	
    <!-- 配置eh缓存管理器 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation">    
	         <value>classpath:ehcache/ehcache.xml</value>    
	     </property>  
	</bean>
	 
	<!-- 配置一个简单的缓存工厂bean对象 -->
	<bean id="simpleCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
	    <property name="cacheManager" ref="cacheManager" />
	    <!-- 使用缓存 关联ehcache.xml中的缓存配置 -->
	    <property name="cacheName" value="mobileCache" />
	</bean>
	 
	<!-- 配置一个缓存拦截器对象，处理具体的缓存业务 -->
	<bean id="methodCacheInterceptor" class="com.ndlan.canyin.frontdesk.interceptor.MethodCacheInterceptor">
	    <property name="cache" ref="simpleCache"/>
	</bean>
	 
	<!-- 参与缓存的切入点对象 (切入点对象，确定何时何地调用拦截器) -->
	<bean id="methodCachePointCut" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
	    <!-- 配置缓存aop切面 -->
	    <property name="advice" ref="methodCacheInterceptor" />
	    <!-- 配置哪些方法参与缓存策略 -->
	    <!--  
	        .表示符合任何单一字元                  
	        ###  +表示符合前一个字元一次或多次                  
	        ###  *表示符合前一个字元零次或多次                  
	        ###  \Escape任何Regular expression使用到的符号                  
	    -->                 
	    <!-- .*表示前面的前缀(包括包名) 表示print方法-->
	    <property name="patterns">
	        <list>
	            <value>com.ndlan.canyin.frontdesk.service.ctzh.*EmployeeService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.ctzh.*EmployeeService*\.*search.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.ctzh.*EmployeeService*\.*find.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.ctzh.*EmployeeService*\.*get.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.ctzh.*TableService*\.*load.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.ctzh.*TableAreaService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.ctzh.*TableAreaService*\.*search.*</value>
	             <value>com.ndlan.canyin.frontdesk.service.ctzh.*TableAreaService*\.*find.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.ctzh.*PrinterService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.ctzh.*PrinterService*\.*search.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.ctzh.*PrinterService*\.*find.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesCategoryService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesCategoryService*\.*search.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesCategoryService*\.*find.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesSetCategoryService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesSetCategoryService*\.*search.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesSetCategoryService*\.*find.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DisheService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DisheService*\.*search.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesAvoidfoodService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesAvoidfoodService*\.*search.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesAvoidfoodService*\.*find.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesMaterialService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesMaterialService*\.*search.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesMaterialService*\.*find.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesStyleService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesStyleService*\.*search.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesStyleService*\.*find.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesTasteService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesTasteService*\.*search.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesTasteService*\.*find.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesUnitService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesUnitService*\.*search.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.cygl.*DishesUnitService*\.*find.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.sygl.*CashDishesTypeDiscountService*\.*load.*</value>
	            <value>com.ndlan.canyin.frontdesk.service.sygl.*CashDishesTypeDiscountService*\.*find.*</value>
	            
	            <value>com.ndlan.canyin.frontdesk.service.qtsy.*PaymentTypeService*\.*load.*</value>
	        </list>
	    </property>
	</bean>



	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.ndlan.canyin.frontdesk.service,com.ndlan.canyin.frontdesk.transport,com.ndlan.canyin.sharelogic.service">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"> 
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
		<property name="packagesToScan" value="com.ndlan.canyin.base"/>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="net.sf.ehcache.configurationResourceName">ehcache/ehcache-hibernate-local.xml</prop>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
			</props>
		</property>
	</bean>
	
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<bean factory-method="getDialect" class="com.ndlan.canyin.core.persistence.Hibernates">
				<constructor-arg ref="dataSource"/>
			</bean>
		</property>
	</bean>
<!-- 	解决JPA中访问延迟加载属性时产生的无会话异常  -->
	<bean name="openEntityManagerInViewInterceptor" class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor">
	    <property name="entityManagerFactory">
	    <ref bean="entityManagerFactory" />
	    </property>
	</bean>
	
		<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.ndlan.canyin.base.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ndlan.canyin.base.repository.report,com.ndlan.canyin.base.repository.yygl,com.ndlan.canyin.base.repository.mybatis" />
		<property name="annotationClass" value="com.ndlan.canyin.base.repository.MyBatisRepository"/>
	</bean>
	

	<!-- Spring Data Jpa配置 -->
 	<jpa:repositories base-package="com.ndlan.canyin.base"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory" factory-class="com.ndlan.canyin.frontdesk.util.MyRepositoryFactoryBean"/>
   
	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
 	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	
	<!-- 上传拦截，如最大上传值及最小上传值 -->  
    <bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- one of the properties available; the maximum file size in bytes -->  
        <property name="maxUploadSize" value="10240000" />  
    </bean>  
    
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" >  
	 	<property name="messageConverters">   
	          <list>   
	              <bean class = "org.springframework.http.converter.StringHttpMessageConverter">   
	                 <property name = "supportedMediaTypes">
	                       <list>
	                           <value>text/html;charset=UTF-8</value>   
	                      </list>   
	                 </property>   
	              </bean>
	          </list>   
	    </property>  
	 </bean>
    
	<!-- production环境 -->
 	<beans profile="production,development">
 		<context:property-placeholder ignore-unresolvable="true"
			location="classpath*:/application.properties" />	
		
		<!-- 数据源配置, 使用DBCP数据库连接池 -->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<!-- Connection Info -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		
			<!-- Connection Pooling Info -->
			<property name="maxActive" value="${dbcp.maxActive}" />
			<property name="maxIdle" value="${dbcp.maxIdle}" />
			<property name="defaultAutoCommit" value="false" />
			<property name="poolPreparedStatements" value="true" />  
   			<property name="maxOpenPreparedStatements" value="10" />  
    
			<!-- 连接Idle一个小时后超时 -->
			<property name="timeBetweenEvictionRunsMillis" value="3600000" />
			<property name="minEvictableIdleTimeMillis" value="3600000" />
		</bean>
		
		<!-- 数据源配置,使用应用服务器的数据库连接池 -->
		<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->
	</beans>
	
	
	
	<!-- unit test环境 -->
	<beans profile="test">
	 	<context:property-placeholder ignore-resource-not-found="true"
			location="classpath*:/application.properties,
          			  classpath*:/application.test.properties" />	
	
		<!-- 嵌入式内存中数据库 -->
		<jdbc:embedded-database id="dataSource" type="H2">
			<jdbc:script location="classpath:sql/h2/schema.sql"  />
			<jdbc:script location="classpath:data/import-data.sql" encoding="UTF-8"/>
		</jdbc:embedded-database>
	</beans>
</beans>